package com.dingapp.biz.page.fourpage;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.json.JSONException;import org.json.JSONObject;import android.app.Dialog;import android.graphics.Bitmap;import android.graphics.Bitmap.CompressFormat;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.text.TextUtils;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager.LayoutParams;import android.webkit.WebView;import android.widget.ImageView;import android.widget.ImageView.ScaleType;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.android.volley.Response.Listener;import com.dingapp.andriod.z20.R;import com.dingapp.biz.AppConstants;import com.dingapp.biz.db.orm.CartListBean;import com.dingapp.biz.db.orm.GoodsAttrsBean;import com.dingapp.biz.db.orm.GoodsChildAttrsBean;import com.dingapp.biz.db.orm.ImageBigAndMinBean;import com.dingapp.biz.db.orm.OrderPrdAttrsBean;import com.dingapp.biz.db.orm.ScoreGoodsDetail;import com.dingapp.biz.net.RequestDataUtil;import com.dingapp.biz.page.adapters.GoodsPropertyListViewAdapter;import com.dingapp.biz.page.adapters.GoodsPropertyListViewAdapter.OnPropertyListener;import com.dingapp.biz.page.customview.MyListView;import com.dingapp.biz.page.thirdpage.SureOrderFragment.SURE_PAYTYPE;import com.dingapp.biz.pay.weixin.WxConstants;import com.dingapp.biz.util.ImageUtils;import com.dingapp.biz.util.LogoutUtils;import com.dingapp.biz.util.WebViewUtils;import com.dingapp.core.app.BaseFragment;import com.dingapp.core.util.AndroidUtil;import com.dingapp.core.util.Constants;import com.dingapp.core.util.LoggerUtil;import com.dingapp.core.util.UIUtil;import com.dingapp.imageloader.core.ImageLoader;import com.google.gson.Gson;import com.tencent.mm.sdk.modelmsg.SendMessageToWX;import com.tencent.mm.sdk.modelmsg.WXMediaMessage;import com.tencent.mm.sdk.modelmsg.WXWebpageObject;import com.tencent.mm.sdk.openapi.IWXAPI;import com.tencent.mm.sdk.openapi.WXAPIFactory;public class JiFenGoodsDetailFragment extends BaseFragment implements		OnClickListener {	/**	 * loading框	 */	private RelativeLayout rl_progress_goodsdetail;	/**	 * 商品展示图viewpager	 */	private ViewPager vp_goods_detail_image;	/**	 * 小圆点group	 */	private LinearLayout ll_viewGroup;	/**	 * 商品描述	 */	private TextView goods_detail_des;	/**	 * 商品价格	 */	private TextView tv_goods_price_total;	/**	 * 回退按钮	 */	private ImageView img_detail_back;	/**	 * 分享按钮	 */	private ImageView img_detail_share;	/**	 * 立即购买按钮	 */	private TextView tv_buy_now;	private TextView tv_goods_price_total_jifen;	/**	 * 商品属性listview	 */	private MyListView lv_goods_property;	private ImageView img_share_wx;	private ImageView img_shar_friend;	private TextView cancle_share;	private Dialog dialog;	private RelativeLayout rl_head_layout;	private ImageView iv_share;	/**	 * 微信分享	 */	private IWXAPI wxApi;	/**	 * 评价和详请切换	 */	private TextView tv_change_wv;	private TextView tv_change_lv;	private LinearLayout ll_jifendetail_discribtion;	/**	 * 商品数量	 */	private ImageView tv_add_num;	private ImageView tv_reduce_num;	private TextView tv_num;	/**	 * 服务器返回数据	 */	private List<ImageBigAndMinBean> focus_pics;	private String prd_details;	private int prd_id;	private double prd_price;	private String prd_title;	private double goods_weight;	private int send_score;	private int goods_choose_num = 1;	private int goods_avisible_num = 1;	private List<GoodsAttrsBean> dynamic_props;	/**	 * 分享url，需要载url之后追加分享会员的会员ID。例如:http://xx.xx.xx?prd_id=xx&user_id=1	 */	private String share_url;	private List<ImageView> imageViews;	private int previousSelectedePosition;	private ImageLoader imageLoader;	private View layout;	private HashMap<String, GoodsChildAttrsBean> properMap;	private Listener<String> listener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseData(response);		}	};	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		imageLoader = ImageLoader.getInstance();	}	/**	 * @param response	 *            解析数据	 */	protected void parseData(String response) {		try {			JSONObject jsbJson = new JSONObject(response);			String statusCode = jsbJson.getString("statusCode");			String statusMsg = jsbJson.getString("statusMsg");			rl_progress_goodsdetail.setVisibility(View.GONE);			Gson gson = new Gson();			if (statusCode.equals("200")) {				ScoreGoodsDetail bean = gson.fromJson(						jsbJson.getString("data"), ScoreGoodsDetail.class);				if (bean != null) {					dynamic_props = bean.getGoods_attrs();					focus_pics = bean.getGoods_pics();					prd_details = bean.getGoods_detail();					prd_id = bean.getGoods_id();					prd_price = bean.getGoods_price();					goods_avisible_num = bean.getGoods_number();					prd_title = bean.getGoods_name();					send_score = bean.getGoods_score();					goods_weight = bean.getGoods_weight();					if (focus_pics != null && focus_pics.size() > 0							&& focus_pics.get(0).getDetail_url() != null) {						selected_pic = focus_pics.get(0);					}				}				// 先将 vp全部清空				vp_goods_detail_image.removeAllViews();				ll_viewGroup.removeAllViews();				tv_goods_price_total.setText("市场价:￥" + prd_price);				tv_goods_price_total_jifen.setText(send_score + "");				share_url = bean.getShare_url();				if (share_url != null && !TextUtils.isEmpty(share_url)) {					if (AppConstants.member.getSessionId() != null							&& !TextUtils.isEmpty(AppConstants.member									.getSessionId())) {						share_url = share_url + "&new_member_id="								+ AppConstants.member.getMemberId();					}				}				initViewPager();				initGoodsProperty();				initGoodsPropertyData();				initWebViewData();			} else if (TextUtils.equals(statusCode, "1001")) {				UIUtil.showToast(getActivity(), "身份登录信息失效");				LogoutUtils.logout(getActivity());			} else {				UIUtil.showToast(getActivity(), statusMsg);				if (statusCode.equals("8888")) {					popBack(null);				}			}		} catch (JSONException e) {			e.printStackTrace();		}	}	private void requestData() {		HashMap<String, String> postMap = new HashMap<String, String>();		// session_id		if (prd_id != 0) {			postMap.put("goods_id", prd_id + "");		}		String url = AppConstants.jifen_prd_details;		rl_progress_goodsdetail.setVisibility(View.VISIBLE);		RequestDataUtil.getRequestInstance().requestData(listener, postMap,				url, getActivity(), null, "normal");	}	@Override	public View onCreateView(LayoutInflater inflater,			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {		if (layout == null) {			layout = View.inflate(getActivity(), R.layout.jifen_goodsdetail,					null);		}		return layout;	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		wxApi = WXAPIFactory.createWXAPI(getActivity(), WxConstants.WX_APP_ID,				true);		wxApi.registerApp(WxConstants.WX_APP_ID);		initView();		Bundle bundle = getArguments();		lv_goods_property.setFocusable(false);		if (bundle != null && bundle.containsKey("prd_id")) {			prd_id = bundle.getInt("prd_id");		}		initListener();		requestData();	}	/**	 * 初始化轮播图 和 小圆点	 */	@SuppressWarnings("deprecation")	private void initViewPager() {		ImageView imageView;		ImageView pointView;		LinearLayout.LayoutParams layoutParams;		imageViews = new ArrayList<ImageView>();		if (focus_pics == null) {			for (int i = 0; i < 5; i++) {				if (getActivity() == null) {					return;				}				imageView = new ImageView(getActivity());				imageView.setBackgroundResource(R.drawable.icon);				imageView.setScaleType(ScaleType.FIT_XY);				imageViews.add(imageView);				pointView = new ImageView(getActivity());				pointView.setBackgroundResource(R.drawable.selector_pointview);				layoutParams = new LinearLayout.LayoutParams(						LinearLayout.LayoutParams.WRAP_CONTENT,						LinearLayout.LayoutParams.WRAP_CONTENT);				if (i != 0) {					layoutParams.leftMargin = 15;					pointView.setEnabled(false);				} else {					pointView.setEnabled(true);				}				ll_viewGroup.addView(pointView, layoutParams);			}		} else {			for (int i = 0; i < focus_pics.size(); i++) {				if (getActivity() == null) {					return;				}				imageView = new ImageView(getActivity());				imageLoader.displayImage(focus_pics.get(i).getDetail_url(),						imageView);				// imageView.setScaleType(ScaleType.CENTER_CROP);				imageViews.add(imageView);				pointView = new ImageView(getActivity());				pointView.setBackgroundResource(R.drawable.selector_pointview);				layoutParams = new LinearLayout.LayoutParams(						LinearLayout.LayoutParams.WRAP_CONTENT,						LinearLayout.LayoutParams.WRAP_CONTENT);				if (i != 0) {					layoutParams.leftMargin = 15;					pointView.setEnabled(false);				} else {					pointView.setEnabled(true);				}				ll_viewGroup.addView(pointView, layoutParams);			}		}		MyAdapter myAdapter = new MyAdapter();		vp_goods_detail_image.setAdapter(myAdapter);		previousSelectedePosition = 0;		vp_goods_detail_image				.setOnPageChangeListener(new OnPageChangeListener() {					@Override					public void onPageSelected(int arg0) {						ll_viewGroup.getChildAt(previousSelectedePosition)								.setEnabled(false);						ll_viewGroup.getChildAt(arg0).setEnabled(true);						previousSelectedePosition = arg0;					}					@Override					public void onPageScrolled(int arg0, float arg1, int arg2) {					}					@Override					public void onPageScrollStateChanged(int arg0) {					}				});	}	public class MyAdapter extends PagerAdapter {		@Override		public int getCount() {			return imageViews.size();		}		@Override		public boolean isViewFromObject(View arg0, Object arg1) {			return arg0 == arg1;		}		@Override		public Object instantiateItem(ViewGroup container, int position) {			ImageView img = imageViews.get(position);			container.addView(img);			return img;		}		@Override		public void destroyItem(ViewGroup container, int position, Object object) {			container.removeView((View) object);		}	}	/**	 * 商品描述 以及价格	 */	private void initGoodsProperty() {		if (prd_title != null) {			goods_detail_des.setText(prd_title);		}	}	/**	 * 填充商品属性数据	 */	private void initGoodsPropertyData() {		if (dynamic_props != null) {			HashMap<String, GoodsChildAttrsBean> morenMap = new HashMap<String, GoodsChildAttrsBean>();			for (int i = 0; i < dynamic_props.size(); i++) {				GoodsAttrsBean dynamicPropsEntity = dynamic_props.get(i);				if (dynamicPropsEntity.getGoods_attr() != null) {					for (int j = 0; j < dynamicPropsEntity.getGoods_attr()							.size(); j++) {						GoodsChildAttrsBean childBean = dynamicPropsEntity								.getGoods_attr().get(j);						if (childBean.getIs_default() != null								&& childBean.getIs_default().equals("true")) {							morenMap.put(									dynamicPropsEntity.getGoods_attr_name(),									childBean);						}					}				}			}			final GoodsPropertyListViewAdapter goodsPropertyListViewAdapter = new GoodsPropertyListViewAdapter(					getActivity(), dynamic_props, morenMap);			lv_goods_property.setAdapter(goodsPropertyListViewAdapter);			// 获取map集合			properMap = goodsPropertyListViewAdapter.getMap();			/**			 * 监听属性变化,当属性变化之后可以开始计算价格。			 */			goodsPropertyListViewAdapter					.setOnPropertyListener(new OnPropertyListener() {						@Override						public void notifyPriceChange(int position) {							properMap = goodsPropertyListViewAdapter									.getHashMap();						}					});		}	}	private WebView webview;	private TextView tv_no_prd;	private ImageBigAndMinBean selected_pic;	private void initListener() {		tv_buy_now.setOnClickListener(this);		img_detail_back.setOnClickListener(this);		img_detail_share.setOnClickListener(this);		tv_change_lv.setOnClickListener(this);		tv_change_wv.setOnClickListener(this);		tv_add_num.setOnClickListener(this);		tv_reduce_num.setOnClickListener(this);	}	private void initView() {		rl_head_layout = (RelativeLayout) getView().findViewById(				R.id.rl_head_layout_jifen);		int width = Constants.getScreenWidth();		android.view.ViewGroup.LayoutParams reLp = rl_head_layout				.getLayoutParams();		reLp.height = width;		rl_head_layout.setLayoutParams(reLp);		vp_goods_detail_image = (ViewPager) getView().findViewById(				R.id.vp_goods_detail_image_jifen);		ll_viewGroup = (LinearLayout) getView().findViewById(				R.id.ll_viewGroup_jifen);		goods_detail_des = (TextView) getView().findViewById(				R.id.goods_detail_des_jifen);		tv_goods_price_total = (TextView) getView().findViewById(				R.id.tv_jifen_shoppprice);		img_detail_back = (ImageView) getView().findViewById(				R.id.img_detail_back_jifen);		img_detail_share = (ImageView) getView().findViewById(				R.id.img_detail_share_jifen);		tv_buy_now = (TextView) getView().findViewById(R.id.tv_buy_now_jifen);		lv_goods_property = (MyListView) getView().findViewById(				R.id.lv_goods_property_jifen);		webview = (WebView) getView().findViewById(R.id.webview_jifen);		tv_no_prd = (TextView) getView().findViewById(R.id.tv_no_prd_jifen);		tv_change_lv = (TextView) getView().findViewById(				R.id.tv_goodsdetail_comment_jifen);		tv_change_wv = (TextView) getView().findViewById(				R.id.tv_goodsdetail_web_jifen);		rl_progress_goodsdetail = (RelativeLayout) getView().findViewById(				R.id.rl_progress_goodsdetail_jifen);		tv_no_prd.setVisibility(View.GONE);		WebViewUtils.initWebView(webview);		tv_reduce_num = (ImageView) getView()				.findViewById(R.id.iv_reduce_jifen);		tv_add_num = (ImageView) getView().findViewById(R.id.iv_add_jifen);		tv_num = (TextView) getView().findViewById(R.id.tv_num_goods_jifen);		iv_share = new ImageView(getActivity());		iv_share.setImageResource(R.drawable.icon);		ll_jifendetail_discribtion = (LinearLayout) getView().findViewById(				R.id.ll_jifendetail_discribtion);		tv_goods_price_total_jifen = (TextView) getView().findViewById(				R.id.tv_goods_price_total_jifen);		getView().findViewById(R.id.tv_ranking_circle).setBackgroundColor(				0xfff66e00);		getView().findViewById(R.id.tv_ranking_circle2).setBackgroundColor(				0xfff66e00);		getView().findViewById(R.id.tv_ranking_circle3).setBackgroundColor(				0xfff66e00);		getView().findViewById(R.id.tv_ranking_circle4).setBackgroundColor(				0xfff66e00);	}	private void initWebViewData() {		if (prd_details == null) {			return;		}		String template = AndroidUtil.getAssetsContents("article_info2.html");		LoggerUtil.d("webview", template);		String detail = template.replaceAll("%s", prd_details);		LoggerUtil.d("webview", detail);		webview.loadDataWithBaseURL("about:blank", detail, "text/html",				"UTF-8", null);	}	@Override	public void onClick(View v) {		if (v == tv_buy_now) {			if (AppConstants.member.getSessionId() == null					|| TextUtils.isEmpty(AppConstants.member.getSessionId())) {				openPage("login_page", null, false);				return;			}			buyNow();			return;		} else if (v == img_detail_back) {			popStack(null);			return;		} else if (v == img_detail_share) {			share();			return;		} else if (v == img_share_wx) {			dialog.dismiss();			share(1);			return;		} else if (v == img_shar_friend) {			dialog.dismiss();			share(2);			return;		} else if (v == cancle_share) {			dialog.dismiss();			return;		}		if (v == tv_change_lv) {			refreshChangeView(tv_change_lv);			ll_jifendetail_discribtion.setVisibility(View.VISIBLE);			webview.setVisibility(View.GONE);			return;		}		if (v == tv_change_wv) {			refreshChangeView(tv_change_wv);			ll_jifendetail_discribtion.setVisibility(View.GONE);			webview.setVisibility(View.VISIBLE);			return;		}		if (v == tv_add_num) {			if (goods_choose_num >= goods_avisible_num - 1) {				UIUtil.showToast(getActivity(), "商品库存不足");				return;			}			goods_choose_num = goods_choose_num + 1;			tv_num.setText(goods_choose_num + "");			return;		}		if (v == tv_reduce_num) {			if (goods_choose_num <= 1) {				UIUtil.showToast(getActivity(), "商品不能为0");				return;			}			goods_choose_num = goods_choose_num - 1;			tv_num.setText(goods_choose_num + "");			return;		}	}	private void refreshChangeView(TextView tv) {		tv_change_lv.setBackgroundColor(0xffcccccc);		tv_change_wv.setBackgroundColor(0xffcccccc);		tv.setBackgroundColor(0xffffffff);	}	/**	 * 分享页面	 */	@SuppressWarnings("deprecation")	private void share() {		if (dialog == null) {			dialog = new Dialog(getActivity(), R.style.dialog_style);			View view = View					.inflate(getActivity(), R.layout.share_dialog, null);			img_share_wx = (ImageView) view.findViewById(R.id.img_share_wx);			img_shar_friend = (ImageView) view					.findViewById(R.id.img_share_wx_friend);			cancle_share = (TextView) view.findViewById(R.id.cancle_share);			img_share_wx.setOnClickListener(this);			img_shar_friend.setOnClickListener(this);			cancle_share.setOnClickListener(this);			dialog.setContentView(view);			Window window = dialog.getWindow();			window.setBackgroundDrawable(new BitmapDrawable());			window.setGravity(Gravity.BOTTOM);			LayoutParams params = window.getAttributes();			params.height = android.view.ViewGroup.LayoutParams.WRAP_CONTENT;			params.width = android.view.ViewGroup.LayoutParams.MATCH_PARENT;		}		dialog.show();	}	/**	 * 微信分享	 * 	 * @param type	 *            1为分享到好友，2为分享到朋友圈	 */	private void share(final int type) {		boolean isInstalled = wxApi.isWXAppInstalled();		if (!isInstalled) {			UIUtil.showToast(getActivity(), "未安装微信");			return;		}		try {			new Thread() {				@Override				public void run() {					super.run();					WXWebpageObject webpage = new WXWebpageObject();					if (share_url == null || TextUtils.isEmpty(share_url)) {						return;					}					webpage.webpageUrl = share_url;					// webpage.webpageUrl =					// "http://www.topsroboteer.com/bll/info.html?article_id=35";					// webpage.webpageUrl =					// "http://www.dingapp.com/appzuo-release.action?appId=z8";					WXMediaMessage msg = new WXMediaMessage(webpage);					msg.title = "大意思";					msg.description = prd_title;					BitmapDrawable d = (BitmapDrawable) iv_share.getDrawable();					Bitmap bmp = d.getBitmap();					msg.thumbData = ImageUtils.getCompressBitmap(bmp,							CompressFormat.JPEG); // 设置图片数据;					SendMessageToWX.Req req = new SendMessageToWX.Req();					req.transaction = String							.valueOf(System.currentTimeMillis());					req.message = msg;					if (type == 1) {						req.scene = SendMessageToWX.Req.WXSceneSession;					} else {						req.scene = SendMessageToWX.Req.WXSceneTimeline;					}					wxApi.sendReq(req);				}			}.start();		} catch (Exception e) {		}	}	/**	 * 立即购买，跳转到填写订单页面，传递参数	 */	private void buyNow() {		// 判断是否登录，未登录先跳转到登录页面。		if (dynamic_props == null) {			UIUtil.showToast(getActivity(), "没有解析数据成功！");			return;		}		ArrayList<CartListBean> listBean = new ArrayList<CartListBean>();		CartListBean bean = new CartListBean();		bean.setCart_id(0);		bean.setIs_select("true");		bean.setCnt(Integer.parseInt(tv_num.getText().toString()));		List<OrderPrdAttrsBean> goods_attrs = new ArrayList<OrderPrdAttrsBean>();		for (String key : properMap.keySet()) {			OrderPrdAttrsBean attrBean = new OrderPrdAttrsBean();			GoodsChildAttrsBean detailBean = properMap.get(key);			attrBean.setAttr_name(key);			attrBean.setAttr_value(detailBean.getGoods_attr_value());			attrBean.setAttr_id(detailBean.getGoods_attr_value_id());			goods_attrs.add(attrBean);		}		bean.setGoods_attrs(goods_attrs);		bean.setGoods_id(prd_id);		bean.setGoods_img(selected_pic);		bean.setGoods_price(prd_price);		bean.setGoods_title(prd_title);		bean.setGoods_weight(goods_weight);		bean.setSend_score(send_score);		listBean.add(bean);		Bundle bundle = new Bundle();		bundle.putParcelableArrayList("cart_list", listBean);		bundle.putDouble("price", prd_price);		bundle.putString("sure_paytype", SURE_PAYTYPE.NORMAL.name());		openPage("jifen_sureorder", bundle, true);	}}