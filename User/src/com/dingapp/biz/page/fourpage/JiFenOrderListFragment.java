package com.dingapp.biz.page.fourpage;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.json.JSONException;import org.json.JSONObject;import view.refresh.PullToRefreshBase;import view.refresh.PullToRefreshBase.Mode;import view.refresh.PullToRefreshListView;import android.app.Dialog;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager.LayoutParams;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.PopupWindow;import android.widget.TextView;import com.android.volley.Response.Listener;import com.dingapp.andriod.z20.R;import com.dingapp.biz.AppConstants;import com.dingapp.biz.db.orm.ItemJifenOrderBean;import com.dingapp.biz.db.orm.ModifyBean;import com.dingapp.biz.net.RequestDataUtil;import com.dingapp.biz.page.adapters.JiFenOrderAdapter;import com.dingapp.biz.util.StopRefresh;import com.dingapp.core.app.BaseFragment;import com.dingapp.core.util.Constants;import com.dingapp.core.util.UIUtil;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;public class JiFenOrderListFragment extends BaseFragment implements		OnClickListener {	private PullToRefreshListView pullListView;	private TextView tv_title;	private ImageView iv_back;	private JiFenOrderAdapter orderListViewAdapter;	private int index = 0;	private String title = "全部";	public static enum MODE {		UP, DOWN	}	private List<ItemJifenOrderBean> dataList = new ArrayList<ItemJifenOrderBean>();	private Listener<String> listListener = new Listener<String>() {		@Override		public void onResponse(String response) {			if (pullListView != null) {				pullListView.onRefreshComplete();			}			parserListData(response, MODE.DOWN);		}	};	private Listener<String> moreListener = new Listener<String>() {		@Override		public void onResponse(String response) {			if (pullListView != null) {				pullListView.onRefreshComplete();			}			parserListData(response, MODE.UP);		}	};	private String status = "all";	private FrameLayout fl_empty_data;	// 确认收货	private Listener<String> receiveListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parserReceive(response);		}	};	@Override	public View onCreateView(LayoutInflater inflater,			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {		return inflater.inflate(R.layout.center_jifen_orderlist, null);	}	@Override	protected void onDataReset(Bundle bundle) {		super.onDataReset(bundle);		if (bundle != null && bundle.containsKey("refresh")) {			// initData(listListener, 0);		}	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		initView();		initListener();		orderListViewAdapter = new JiFenOrderAdapter(getActivity(),				new JiFenOrderAdapter.OrderItemClick() {					@Override					public void setOnclick(Bundle bundle,							ItemJifenOrderBean bean) {						if (bundle != null) {							String orderStatus = bundle									.getString("order_status");							if (orderStatus.equals("receipting")) {								sureReceiverOrder(bean.getOrder_id() + "");								return;							}						}					}				}, JiFenOrderListFragment.this);		pullListView.setAdapter(orderListViewAdapter);		initData(listListener, 0);	}	// 显示选择的弹出框	private TextView tv_first, tv_second, tv_third, tv_four, tv_five, tv_six;	private View v_parent;	private PopupWindow popWindow;	private void popDialog() {		if (popWindow == null) {			LayoutInflater inflater = LayoutInflater.from(getActivity());			View dialogView = inflater.inflate(R.layout.choose_dialog, null);			tv_first = (TextView) dialogView.findViewById(R.id.tv_first_choose);			tv_second = (TextView) dialogView					.findViewById(R.id.tv_second_choose);			tv_third = (TextView) dialogView.findViewById(R.id.tv_third_choose);			tv_four = (TextView) dialogView.findViewById(R.id.tv_four_choose);			tv_five = (TextView) dialogView.findViewById(R.id.tv_five_choose);			tv_six = (TextView) dialogView.findViewById(R.id.tv_six_choose);			v_parent = dialogView.findViewById(R.id.v_parent);			tv_first.setText("全部");			tv_second.setText("进行中");			tv_third.setText("已结束");			tv_four.setVisibility(View.GONE);			tv_five.setVisibility(View.GONE);			tv_six.setVisibility(View.GONE);			tv_first.setOnClickListener(this);			tv_second.setOnClickListener(this);			tv_third.setOnClickListener(this);			tv_five.setOnClickListener(this);			tv_four.setOnClickListener(this);			tv_second.setOnClickListener(this);			v_parent.setOnClickListener(this);			tv_six.setOnClickListener(this);			popWindow = new PopupWindow();			popWindow.setContentView(dialogView);			popWindow.setWidth(Constants.getScreenWidth());			popWindow.setHeight(Constants.getScreenHeight());		}		popWindow.showAsDropDown(tv_title);	}	private void initListener() {		iv_back.setOnClickListener(this);		tv_title.setOnClickListener(this);	}	private void initView() {		pullListView = (PullToRefreshListView) getView().findViewById(				R.id.lv_jifenorderlist_works);		iv_back = (ImageView) getView().findViewById(				R.id.iv_jifenorderlist_back);		tv_title = (TextView) getView().findViewById(				R.id.tv_jinfenorderlist_title);		tv_title.setText(title);		fl_empty_data = (FrameLayout) getView()				.findViewById(R.id.fl_empty_data);		initPullRefreshView();	}	@SuppressWarnings({ "rawtypes", "unchecked" })	private void initPullRefreshView() {		StopRefresh.initRefreshView(pullListView, Mode.BOTH);		pullListView				.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {					@Override					public void onPullDownToRefresh(							PullToRefreshBase refreshView) {						StopRefresh.stopRefreash(pullListView);						initData(listListener, 0);					}					@Override					public void onPullUpToRefresh(PullToRefreshBase refreshView) {						StopRefresh.stopRefreash(pullListView);						initData(moreListener, index + 1);					}				});	}	private void initData(Listener<String> listener, int index) {		HashMap<String, String> postMap = new HashMap<String, String>();		postMap.put("page_idx", index + "");		postMap.put("if_score", status);		postMap.put("type", "score");		boolean isLogin = RequestDataUtil.getRequestInstance().requestData(				listener, postMap, AppConstants.ORDER_LIST, getActivity(),				null, "true");		if (isLogin) {			openPage("login_page", null, false);		}	}	private void parserListData(String response, MODE mode) {		try {			JSONObject jsbJson = new JSONObject(response);			String statusCode = jsbJson.getString("statusCode");			String statusMsg = jsbJson.getString("statusMsg");			Gson gson = new Gson();			if (statusCode.equals("200")) {				List<ItemJifenOrderBean> taskList = gson.fromJson(						jsbJson.getString("data"),						new TypeToken<List<ItemJifenOrderBean>>() {						}.getType());				if (mode == MODE.DOWN) {					index = 0;					dataList.clear();				} else if (mode == MODE.UP) {					if (taskList != null && taskList.size() > 0) {						index++;					} else {						UIUtil.showToast(getActivity(), "暂无更多数据");					}				}				if (taskList != null) {					dataList.addAll(taskList);				}				setView();				orderListViewAdapter.setList(dataList);			} else {				UIUtil.showToast(getActivity(), statusMsg);			}		} catch (JSONException e) {			e.printStackTrace();		}	}	private void setView() {		if (dataList != null && dataList.size() > 0) {			fl_empty_data.setVisibility(View.GONE);		} else {			fl_empty_data.setVisibility(View.VISIBLE);		}	}	@Override	public void onHiddenChanged(boolean hidden) {		super.onHiddenChanged(hidden);		if (!hidden) {			initData(listListener, 0);		}	}	@SuppressWarnings("deprecation")	public void sureReceiverOrder(final String order_id) {		final Dialog dialog = new Dialog(getActivity(), R.style.dialog_style);		View view = View.inflate(getActivity(), R.layout.cancled_layout, null);		TextView tv = (TextView) view.findViewById(R.id.tv_content);		tv.setText("您确定要收货吗？");		dialog.setContentView(view);		dialog.setCancelable(true);		dialog.show();		TextView bt_negative = (TextView) view.findViewById(R.id.tv_cancled);		TextView bt_positive = (TextView) view.findViewById(R.id.tv_confirm);		// 取消按钮		bt_negative.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {				// 取消				dialog.dismiss();			}		});		// 确定按钮		bt_positive.setOnClickListener(new OnClickListener() {			@Override			public void onClick(View arg0) {				dialog.dismiss();				requestSureReceive(order_id);			}		});		Window window = dialog.getWindow();		window.setBackgroundDrawable(new BitmapDrawable());		window.setGravity(Gravity.CENTER);		LayoutParams params = window.getAttributes();		params.height = android.view.ViewGroup.LayoutParams.WRAP_CONTENT;		params.width = android.view.ViewGroup.LayoutParams.WRAP_CONTENT;		dialog.show();	}	// 确认收货	private void requestSureReceive(String order_id) {		HashMap<String, String> postMap = new HashMap<String, String>();		postMap.put("order_id", order_id);		boolean isLogin = RequestDataUtil.getRequestInstance().requestData(				receiveListener, postMap,				"/api/v1/goods/order_confirm_receipt", getActivity(), null,				"true");		if (isLogin) {			openPage("login_page", null, false);		}	}	// 解析确认收货	private void parserReceive(String response) {		try {			Gson gson = new Gson();			ModifyBean bean = gson.fromJson(response, ModifyBean.class);			if (bean.getStatusCode().equals("200")					&& bean.getData().getSuc().equals("true")) {				UIUtil.showToast(getActivity(), "收货成功");				initData(listListener, 0);			} else {				UIUtil.showToast(getActivity(), bean.getStatusMsg());			}		} catch (Exception e) {		}	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (popWindow != null && popWindow.isShowing()) {			popWindow.dismiss();		}		return super.onKeyDown(keyCode, event);	}	@Override	public void onClick(View v) {		if (v == iv_back) {			if (popWindow != null) {				popWindow.dismiss();			}			popBack(null);			return;		}		if (v == tv_title) {			if (popWindow != null && popWindow.isShowing()) {				popWindow.dismiss();			} else {				popDialog();			}			return;		}		if (v == tv_first) {			if (popWindow != null) {				popWindow.dismiss();			}			status = "all";			tv_title.setText("全部");			initData(listListener, 0);			return;		}		if (v == tv_second) {			if (popWindow != null) {				popWindow.dismiss();			}			status = "ordering";			tv_title.setText("进行中");			initData(listListener, 0);			return;		}		if (v == tv_third) {			if (popWindow != null) {				popWindow.dismiss();			}			tv_title.setText("已结束");			status = "finished";			initData(listListener, 0);			return;		}		if (v == tv_four) {			if (popWindow != null) {				popWindow.dismiss();			}			tv_title.setText("待收货");			status = "receipting";			initData(listListener, 0);			return;		}		if (v == tv_five) {			if (popWindow != null) {				popWindow.dismiss();			}			tv_title.setText("待评价");			status = "evaluating";			initData(listListener, 0);			return;		}		if (v == tv_six) {			if (popWindow != null) {				popWindow.dismiss();			}			tv_title.setText("已完成");			status = "finished";			initData(listListener, 0);			return;		}		if (v == v_parent) {			if (popWindow != null) {				popWindow.dismiss();			}			return;		}	}}