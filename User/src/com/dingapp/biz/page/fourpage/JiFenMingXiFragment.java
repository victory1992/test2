package com.dingapp.biz.page.fourpage;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.json.JSONException;import org.json.JSONObject;import view.refresh.PullToRefreshBase;import view.refresh.PullToRefreshBase.Mode;import view.refresh.PullToRefreshScrollView;import android.content.Context;import android.os.Bundle;import android.support.annotation.Nullable;import android.text.TextUtils;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.BaseExpandableListAdapter;import android.widget.ExpandableListView;import android.widget.ExpandableListView.OnGroupClickListener;import android.widget.ImageView;import android.widget.TextView;import com.android.volley.Response.Listener;import com.dingapp.andriod.z20.R;import com.dingapp.biz.AppConstants;import com.dingapp.biz.db.orm.ScoreChildChildBean;import com.dingapp.biz.db.orm.ScoreChildListBean;import com.dingapp.biz.db.orm.ScoreListBean;import com.dingapp.biz.net.RequestDataUtil;import com.dingapp.biz.page.customview.MyExpandableListView;import com.dingapp.biz.util.StopRefresh;import com.dingapp.core.app.BaseFragment;import com.dingapp.core.util.UIUtil;import com.google.gson.Gson;public class JiFenMingXiFragment extends BaseFragment implements		OnClickListener {	private ImageView iv_back;	private TextView tv_jifen_right;	private MyExpandableListView listView;	private PullToRefreshScrollView pullScrollView;	private ViewHolderGroup holderGroup = null;	private TextView tv_jifen;	private ImageView iv_btn;	public static enum MODE {		UP, DOWN	}	private int index = 0;	private List<ScoreChildListBean> dataList = new ArrayList<ScoreChildListBean>();	private MyExpandableAdapter adapter;	private Listener<String> refreshListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parserData(response, MODE.DOWN);		}	};	private Listener<String> moreListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parserData(response, MODE.UP);		}	};	private boolean falg;	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			popStack(null);			return true;		}		return false;	}	@Override	public View onCreateView(LayoutInflater inflater,			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {		return inflater.inflate(R.layout.jifenmingxi, null);	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		initView(getView());		initListener();		listView.setFocusable(false);		adapter = new MyExpandableAdapter();		listView.setAdapter(adapter);		initData(refreshListener, 0);		listView.setOnGroupClickListener(new OnGroupClickListener() {			@Override			public boolean onGroupClick(ExpandableListView parent, View v,					int groupPosition, long id) {				parent.expandGroup(groupPosition);				return true;			}		});	}	private void initView(View view) {		iv_back = (ImageView) view.findViewById(R.id.iv_jifenmingxi_back);		listView = (MyExpandableListView) view				.findViewById(R.id.lv_jifenmingxi);		pullScrollView = (PullToRefreshScrollView) view				.findViewById(R.id.jifenmingxi_pulltorefreshscrollview);		StopRefresh.initRefreshView(pullScrollView, Mode.PULL_FROM_END);		tv_jifen_right = (TextView) view				.findViewById(R.id.tv_jifenmingxi_right);		tv_jifen = (TextView) view.findViewById(R.id.tv_jifenmingxi_jifen);		iv_btn = (ImageView) view.findViewById(R.id.iv_jifenmingxi_btn);	}	@SuppressWarnings({ "unchecked", "rawtypes" })	private void initListener() {		iv_back.setOnClickListener(this);		iv_btn.setOnClickListener(this);		tv_jifen_right.setOnClickListener(this);		pullScrollView				.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {					@Override					public void onPullDownToRefresh(							PullToRefreshBase refreshView) {						StopRefresh.stopRefreash(pullScrollView);						initData(refreshListener, 0);					}					@Override					public void onPullUpToRefresh(PullToRefreshBase refreshView) {						StopRefresh.stopRefreash(pullScrollView);						initData(moreListener, index + 1);					}				});	}	class MyExpandableAdapter extends BaseExpandableListAdapter {		private List<ScoreChildListBean> list_group = new ArrayList<ScoreChildListBean>();		public void setList(List<ScoreChildListBean> list) {			if (list != null) {				list_group.clear();				list_group.addAll(list);			}			notifyDataSetChanged();		}		/*		 * 获取当前适配器中加载的组的个数		 */		@Override		public int getGroupCount() {			return list_group.size();		}		/*		 * 根据groupPosition 组的下标获取每个组中加载的数据的条目		 */		@Override		public int getChildrenCount(int groupPosition) {			// return list_group.get(groupPosition).getList().size();			ScoreChildListBean ormAddr = list_group.get(groupPosition);			return ormAddr.getScore_list() == null ? 0 : ormAddr					.getScore_list().size();			// return			// ((FriendAddr)list_group.get(groupPosition)).getListMember().size();		}		/*		 * 根据groupPosition 组的下标获取当前组的对象		 */		@Override		public Object getGroup(int groupPosition) {			return list_group.get(groupPosition);		}		/*		 * 根据groupPosition 组的下标以及childPosition 子的下标获取 指定组中的指定下标的对象		 */		@Override		public Object getChild(int groupPosition, int childPosition) {			// return			// list_group.get(groupPosition).getList().get(childPosition);			ScoreChildListBean bean = list_group.get(groupPosition);			return bean.getScore_list().get(childPosition);		}		/*		 * 根据groupPosition 组下标获取行id		 */		@Override		public long getGroupId(int groupPosition) {			return groupPosition;		}		/*		 * 根据groupPosition组下标中的childPosition 子下标获取指定组中的指定下标的行id		 */		@Override		public long getChildId(int groupPosition, int childPosition) {			return childPosition;		}		/*		 * child的id与对象的id是否相同 与底层相关		 */		@Override		public boolean hasStableIds() {			return true;		}		/*		 * boolean isExpanded 表示当前的组是否可展开		 */		@Override		public View getGroupView(int groupPosition, boolean isExpanded,				View convertView, ViewGroup parent) {			ScoreChildListBean addr = (ScoreChildListBean) adapter					.getGroup(groupPosition);			if (convertView == null) {				LayoutInflater inflater = LayoutInflater.from(getActivity());				convertView = inflater.inflate(R.layout.item_moneryrecord_tag,						null);				holderGroup = new ViewHolderGroup();				holderGroup.tv_city = (TextView) convertView						.findViewById(R.id.tv_item_money_record_tag);				convertView.setTag(holderGroup);			} else {				holderGroup = (ViewHolderGroup) convertView.getTag();			}			holderGroup.tv_city.setText(addr.getMonth());			return convertView;		}		/*		 * boolean isLastChild 表示当前绘制的item是否是当前组中的最后一个item		 */		@Override		public View getChildView(int groupPosition, int childPosition,				boolean isLastChild, View convertView, ViewGroup parent) {			ScoreChildChildBean itemBean = (ScoreChildChildBean) adapter					.getChild(groupPosition, childPosition);			ViewHolder holder = null;			if (convertView == null) {				LayoutInflater inflater = (LayoutInflater) getActivity()						.getSystemService(Context.LAYOUT_INFLATER_SERVICE);				convertView = inflater.inflate(R.layout.item_jifenmingxi, null);				holder = new ViewHolder();				holder.tv_detail = (TextView) convertView						.findViewById(R.id.tv_item_jifenmingxi_detail);				holder.tv_title = (TextView) convertView						.findViewById(R.id.tv_item_jifenmingxi_title);				holder.tv_money = (TextView) convertView						.findViewById(R.id.tv_item_jifenmingxi_jifen);				holder.tv_time = (TextView) convertView						.findViewById(R.id.tv_item_jifenmingxi_time);				convertView.setTag(holder);			} else {				holder = (ViewHolder) convertView.getTag();			}			if (itemBean != null) {				holder.tv_detail.setText(itemBean.getDetail());				holder.tv_money.setText(itemBean.getScore() + "");				holder.tv_time.setText(itemBean.getDate());				holder.tv_title.setText(itemBean.getTitle());			}			return convertView;		}		/*		 * 表示组中的child是否能够被点击 返回true表示可以相应child的事件		 */		@Override		public boolean isChildSelectable(int groupPosition, int childPosition) {			return true;		}	}	static class ViewHolder {		TextView tv_time;		TextView tv_money;		TextView tv_title;		TextView tv_detail;	}	static class ViewHolderGroup {		TextView tv_city;	}	private void initData(Listener<String> listener, int index) {		HashMap<String, String> postMap = new HashMap<String, String>();		postMap.put("page_idx", index + "");		RequestDataUtil.getRequestInstance().requestData(listener, postMap,				AppConstants.jifen_list, getActivity(), null, "true");	}	private void parserData(String response, MODE mode) {		try {			JSONObject jsbJson = new JSONObject(response);			String statusCode = jsbJson.getString("statusCode");			String statusMsg = jsbJson.getString("statusMsg");			Gson gson = new Gson();			if (statusCode.equals("200")) {				ScoreListBean pBean = gson.fromJson(jsbJson.getString("data"),						ScoreListBean.class);				if (pBean != null) {					tv_jifen.setText(pBean.getTotal_score() + "");				}				List<ScoreChildListBean> list = pBean.getScore_info();				if (mode == MODE.DOWN) {					if (falg) {						if (list != null && list.size() > 0) {							UIUtil.showToast(getActivity(), "页面刷新完成");						} else {							UIUtil.showToast(getActivity(), "页面刷新完成,暂无数据");						}					}					falg = true;					index = 0;					dataList.clear();				} else if (mode == MODE.UP) {					if (list != null && list.size() > 0) {						index++;					}				}				if (list != null) {					if (dataList.size() != 0) {						for (int i = 0; i < list.size(); i++) {							String key = dataList.get(dataList.size() - 1)									.getMonth();							String newKey = list.get(i).getMonth();							if (TextUtils.equals(key, newKey)) {								dataList.get(dataList.size() - 1)										.getScore_list()										.addAll(list.get(i).getScore_list());							} else {								dataList.add(list.get(i));							}						}					} else {						dataList.addAll(list);					}				}				adapter.setList(dataList);				for (int i = 0; i < adapter.getGroupCount(); i++) {					listView.expandGroup(i);				}			} else {				UIUtil.showToast(getActivity(), statusMsg);			}		} catch (JSONException e) {			e.printStackTrace();		}	}	@Override	public void onClick(View v) {		if (v == iv_btn) {			openPage("jifen_home", null, false);			return;		}		if (v == tv_jifen_right) {			// 积分说明			openPage("score_discribe", null, false);			return;		}		if (v == iv_back) {			popBack(null);			return;		}	}}