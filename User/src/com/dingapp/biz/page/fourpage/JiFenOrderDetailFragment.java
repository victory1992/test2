package com.dingapp.biz.page.fourpage;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.json.JSONException;import org.json.JSONObject;import android.app.Dialog;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.support.annotation.Nullable;import android.text.TextUtils;import android.view.Gravity;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.ViewGroup.LayoutParams;import android.view.Window;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ImageView;import android.widget.TextView;import com.android.volley.RequestQueue;import com.android.volley.Response.ErrorListener;import com.android.volley.Response.Listener;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.dingapp.andriod.z20.R;import com.dingapp.biz.AppConstants;import com.dingapp.biz.db.orm.CartListBean;import com.dingapp.biz.db.orm.OrderDetailBean;import com.dingapp.biz.db.orm.OrederGoodsItemBean;import com.dingapp.biz.net.SingleRequestQueue;import com.dingapp.biz.net.StringPostRequest;import com.dingapp.biz.page.adapters.ScoreSureOrderCartAdapter;import com.dingapp.biz.page.customview.MyListView;import com.dingapp.biz.util.LogoutUtils;import com.dingapp.core.app.BaseFragment;import com.dingapp.core.util.AndroidUtil;import com.dingapp.core.util.UIUtil;import com.google.gson.Gson;public class JiFenOrderDetailFragment extends BaseFragment implements		OnClickListener {	private ImageView img_back;	/**	 * 确认收货	 */	private TextView tv_order_status2;	/**	 * 订单状态：待定制	 */	private TextView tv_order_statu;	/**	 * 订单编号：2015090122112	 */	private TextView tv_order_number;	/**	 * 下单时间：2016-02-26 09：16：23	 */	private TextView tv_order_time;	private TextView tv_order_contact;	private MyListView my_lv_goods;	private ScoreSureOrderCartAdapter goodsAdapter;	private View inflate;	private TextView tv_receiver_address;	private TextView tv_express;	private TextView tv_buyer_massage;	private TextView tv_total_score;	private RequestQueue mQueue;	private String order_id;	private OrderDetailBean detailBean;	private Listener<String> listener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseData(response);		}	};	private Listener<String> confirmListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseConfirmData(response);		}	};	private ErrorListener errorListener = new ErrorListener() {		@Override		public void onErrorResponse(VolleyError error) {		}	};	private Dialog confirm_dialog;	protected void parseData(String response) {		try {			JSONObject jsonObject = new JSONObject(response);			String statusCode = jsonObject.getString("statusCode");			String statusMsg = jsonObject.getString("statusMsg");			Gson gson = new Gson();			if ("200".equals(statusCode)) {				detailBean = gson.fromJson(jsonObject.getString("data"),						OrderDetailBean.class);				initData(detailBean);			} else if ("1001".equals(statusCode)) {				UIUtil.showToast(getActivity(), "登录信息失效，请重新登录！");				LogoutUtils.logout(getActivity());			} else {				UIUtil.showToast(getActivity(), statusMsg);			}		} catch (JSONException e) {			e.printStackTrace();		}	}	protected void parseConfirmData(String response) {		try {			JSONObject jsonObject = new JSONObject(response);			String statusCode = jsonObject.getString("statusCode");			String statusMsg = jsonObject.getString("statusMsg");			if ("200".equals(statusCode)) {				if (jsonObject.has("data")) {					JSONObject jsonObject_data = jsonObject							.getJSONObject("data");					if (jsonObject_data.has("suc")) {						if (jsonObject_data.getBoolean("suc")) {							confirm_dialog.dismiss();							UIUtil.showToast(getActivity(), "收货成功");							requestData();						} else {							confirm_dialog.dismiss();							UIUtil.showToast(getActivity(), "收货失败,请重试！");						}					}				}			} else if (TextUtils.equals(statusCode, "1001")) {				UIUtil.showToast(getActivity(), "身份登录信息失效");				LogoutUtils.logout(getActivity());			} else {				UIUtil.showToast(getActivity(), "未知错误" + statusMsg);			}		} catch (JSONException e) {			e.printStackTrace();		}	}	private void initData(final OrderDetailBean detailBean) {		if (detailBean == null) {			return;		}		tv_order_status2.setVisibility(View.GONE);		if (detailBean.getStatus() != null) {			if ("shipping".equals(detailBean.getStatus())) {				tv_order_statu.setText("待发货");			} else if ("receipting".equals(detailBean.getStatus())) {				tv_order_statu.setText("待收货");				tv_order_status2.setVisibility(View.VISIBLE);				tv_order_status2.setText("确认收货");				tv_order_status2.setOnClickListener(new OnClickListener() {					@Override					public void onClick(View arg0) {						// 确认收货						showComfirmDilog(detailBean.getOrder_id());					}				});			} else if ("finished".equals(detailBean.getStatus())) {				tv_order_statu.setText("已完结");			}		}		tv_order_number.setText(detailBean.getOrder_no());		tv_order_time.setText(detailBean.getCreate_time());		tv_order_contact.setText(detailBean.getReceiver_name() + "    "				+ detailBean.getReceiver_mobile());		List<OrederGoodsItemBean> goodsList = detailBean.getGoods_list();		List<CartListBean> cartList = new ArrayList<CartListBean>();		if (goodsList != null && goodsList.size() > 0) {			for (int i = 0; i < goodsList.size(); i++) {				CartListBean cartBean = new CartListBean();				OrederGoodsItemBean goodsBean = goodsList.get(i);				cartBean.setGoods_attrs(goodsBean.getGoods_attrs());				cartBean.setCnt(goodsBean.getGoods_cnt());				cartBean.setGoods_id(goodsBean.getGoods_id());				cartBean.setGoods_title(goodsBean.getGoods_name());				cartBean.setGoods_img(goodsBean.getGoods_pic());				cartBean.setGoods_price(goodsBean.getGoods_price());				cartBean.setSend_score(goodsBean.getGoods_score());				cartList.add(cartBean);			}			goodsAdapter.setList(cartList);		}		if (detailBean.getBuyer_message() != null				&& !TextUtils.isEmpty(detailBean.getBuyer_message())) {			tv_buyer_massage.setText(detailBean.getBuyer_message());		} else {			tv_buyer_massage.setText("买家未留言");		}		int goods_cnt = 0;		for (int i = 0; i < goodsList.size(); i++) {			OrederGoodsItemBean bean = goodsList.get(i);			goods_cnt = goods_cnt + bean.getGoods_cnt();		}		if (detailBean.getExpress_id() != null				&& !TextUtils.isEmpty(detailBean.getExpress_id())) {			tv_express.setText(detailBean.getExpress_name() + "  "					+ detailBean.getExpress_id());		} else {			if (!TextUtils.isEmpty(detailBean.getExpress_name())) {				tv_express.setText(detailBean.getExpress_name());			}		}		if (detailBean.getGoods_list().size() > 0) {			tv_total_score.setText(detailBean.getGoods_list().get(0)					.getGoods_score()					+ "");		}		tv_receiver_address.setText(detailBean.getReceive_address());	}	@Override	public View onCreateView(LayoutInflater inflater,			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {		inflate = View.inflate(getActivity(), R.layout.jifen_orderdetail, null);		return inflate;	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		if (getArguments() != null && getArguments().containsKey("order_id")) {			order_id = getArguments().getString("order_id");		}		mQueue = SingleRequestQueue.getreRequestQueue(getActivity());		initView(getView());		initListener();		goodsAdapter = new ScoreSureOrderCartAdapter(getActivity(),				new ArrayList<CartListBean>());		my_lv_goods.setFocusable(false);		my_lv_goods.setAdapter(goodsAdapter);		requestData();	}	private void requestData() {		if (AndroidUtil.isNetworkAvailable(getActivity())) {			Map<String, String> postMap = new HashMap<String, String>();			String url = AppConstants.BaseUrl + AppConstants.ORDER_DETAIL;			postMap.put("session_id", AppConstants.member == null ? ""					: AppConstants.member.getSessionId());			postMap.put("platform", AppConstants.PLATFORM);			postMap.put("order_id", order_id);			postMap.put("type", "member");			StringRequest sr = new StringPostRequest(postMap, url, listener,					errorListener);			mQueue.add(sr);		} else {			UIUtil.showToast(getActivity(), AppConstants.NetNotifice);		}	}	private void initListener() {		img_back.setOnClickListener(this);		my_lv_goods.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,					long arg3) {				CartListBean bean = (CartListBean) goodsAdapter						.getItem((int) arg3);				Bundle bundle = new Bundle();				bundle.putInt("prd_id", bean.getGoods_id());				openPage("jifen_goods_detail", bundle, true);			}		});	}	private void initView(View v) {		tv_receiver_address = (TextView) v				.findViewById(R.id.tv_order_receiveraddress_jifen);		tv_express = (TextView) v.findViewById(R.id.tv_order_express_jifen);		img_back = (ImageView) v.findViewById(R.id.img_back_jifen);		tv_order_status2 = (TextView) v				.findViewById(R.id.tv_order_status2_jifen);		tv_order_statu = (TextView) v.findViewById(R.id.tv_order_statu_jifen);		tv_order_number = (TextView) v.findViewById(R.id.tv_order_number_jifen);		tv_order_time = (TextView) v.findViewById(R.id.tv_order_time_jifen);		tv_order_contact = (TextView) v				.findViewById(R.id.tv_order_receiveman_jifen);		my_lv_goods = (MyListView) v.findViewById(R.id.lv_orderdetail_jifen);		tv_buyer_massage = (TextView) v				.findViewById(R.id.tv_order_buyermessage_jifen);		tv_total_score = (TextView) v				.findViewById(R.id.tv_orderdetail_totalprice_jifen);	}	@Override	public void onClick(View v) {		if (v == img_back) {			popStack(null);			return;		}	}	@SuppressWarnings("deprecation")	private void showComfirmDilog(final int id) {		confirm_dialog = new Dialog(getActivity(), R.style.dialog_style);		View inflate = View.inflate(getActivity(), R.layout.cancled_layout,				null);		((TextView) (inflate.findViewById(R.id.tv_content)))				.setText("你确定货已经收到吗？");		inflate.findViewById(R.id.tv_cancled).setOnClickListener(				new OnClickListener() {					@Override					public void onClick(View arg0) {						confirm_dialog.dismiss();					}				});		inflate.findViewById(R.id.tv_confirm).setOnClickListener(				new OnClickListener() {					@Override					public void onClick(View arg0) {						requestConfirmOrder(id);					}				});		confirm_dialog.setContentView(inflate);		Window window = confirm_dialog.getWindow();		window.setBackgroundDrawable(new BitmapDrawable());		window.setGravity(Gravity.CENTER);		LayoutParams params = window.getAttributes();		params.height = android.view.ViewGroup.LayoutParams.WRAP_CONTENT;		params.width = android.view.ViewGroup.LayoutParams.WRAP_CONTENT;		confirm_dialog.show();	}	protected void requestConfirmOrder(int id) {		if (AndroidUtil.isNetworkAvailable(getActivity())) {			String url = AppConstants.BaseUrl					+ "/api/v1/goods/order_confirm_receipt";			Map<String, String> postMap = new HashMap<String, String>();			postMap.put("platform", AppConstants.PLATFORM);			postMap.put(					"session_id",					AppConstants.member != null ? AppConstants.member							.getSessionId() : "");			postMap.put("order_id", id + "");			StringPostRequest stringPostRequest = new StringPostRequest(					postMap, url, confirmListener, errorListener);			mQueue.add(stringPostRequest);		} else {			UIUtil.showToast(getActivity(), AppConstants.NetNotifice);		}	}	@Override	public void onHiddenChanged(boolean hidden) {		super.onHiddenChanged(hidden);		if (!hidden) {			requestData();		}	}	@Override	public void onDestroy() {		mQueue.cancelAll(this);		super.onDestroy();	}	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			popStack(null);			return true;		}		return false;	}}