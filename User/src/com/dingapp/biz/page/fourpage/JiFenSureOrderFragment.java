package com.dingapp.biz.page.fourpage;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.app.Dialog;import android.graphics.drawable.BitmapDrawable;import android.os.Bundle;import android.support.annotation.Nullable;import android.text.TextUtils;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.view.ViewGroup.LayoutParams;import android.view.Window;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import com.android.volley.Response.Listener;import com.dingapp.andriod.z20.R;import com.dingapp.biz.AppConstants;import com.dingapp.biz.db.orm.AddressBean;import com.dingapp.biz.db.orm.CartListBean;import com.dingapp.biz.db.orm.OrderPrdAttrsBean;import com.dingapp.biz.net.RequestDataUtil;import com.dingapp.biz.page.adapters.ScoreSureOrderCartAdapter;import com.dingapp.core.app.BaseFragment;import com.dingapp.core.db.dao.MemberDao;import com.dingapp.core.util.UIUtil;public class JiFenSureOrderFragment extends BaseFragment implements		OnClickListener {	private ImageView iv_back;	private ListView lv_sureorder;	private TextView tv_address;	private ArrayList<AddressBean> mList;	private LinearLayout rl_address1;	private LinearLayout rl_address2;	private TextView tv_name;	private TextView tv_phone;	private TextView tv_address_detail;	private TextView tv_sure;	private AddressBean returnBean;	/**	 * 商品价格	 */	private EditText et_extramsg;	private View view;	private String order_num;	private TextView tv_sureorder_totaljifen;	// 默认地址	private Listener<String> alddressListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseAddressData(response);		}	};	// 保存订单接口	private Listener<String> orderSaveListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parserOrderSave(response);		}	};	// 保存订单所需要的参数	private String address_id;	private String extraMsg;	private int allPrice = 0;	// 上界面传过来的cart_list	private ArrayList<CartListBean> cartList = new ArrayList<CartListBean>();	private ScoreSureOrderCartAdapter cartAdapter;	@Override	public View onCreateView(LayoutInflater inflater,			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {		view = inflater.inflate(R.layout.jifen_sureorder, null);		return view;	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		if (getArguments() != null) {			if (getArguments().containsKey("cart_list")) {				cartList = getArguments().getParcelableArrayList("cart_list");			}		}		initView(getView());		initListener();		cartAdapter = new ScoreSureOrderCartAdapter(getActivity(), cartList);		lv_sureorder.setAdapter(cartAdapter);		requestAddressData();	}	@Override	protected void onDataReset(Bundle bundle) {		super.onDataReset(bundle);		if (bundle != null) {			if (bundle.containsKey("address_info")) {				returnBean = bundle.getParcelable("address_info");				initDefaultAddress(returnBean);			}		}	}	private void initView(View v) {		iv_back = (ImageView) v.findViewById(R.id.img_sureorder_back_jifen);		tv_address = (TextView) v				.findViewById(R.id.tv_sureorder_address1_jifen);		rl_address1 = (LinearLayout) v				.findViewById(R.id.ll_sureorder_address1_jifen);		rl_address2 = (LinearLayout) v				.findViewById(R.id.ll_sureorder_address2_jifen);		tv_name = (TextView) v.findViewById(R.id.tv_sureorder_name_jifen);		tv_phone = (TextView) v.findViewById(R.id.tv_sureorder_phone_jifen);		tv_address_detail = (TextView) v				.findViewById(R.id.tv_sureorder_address2_jifen);		et_extramsg = (EditText) v				.findViewById(R.id.et_sureorder_extramsg_jifen);		lv_sureorder = (ListView) v.findViewById(R.id.lv_sureorder_jifen);		lv_sureorder.setFocusable(false);		for (int i = 0; i < cartList.size(); i++) {			CartListBean bean = cartList.get(i);			if (bean.getIs_select() != null					&& bean.getIs_select().equals("true")) {				allPrice = allPrice + bean.getCnt() * bean.getSend_score();			}		}		tv_sure = (TextView) v.findViewById(R.id.tv_sureorder_sure_jifen);		tv_sureorder_totaljifen = (TextView) v				.findViewById(R.id.tv_sureorder_totaljifen);		tv_sureorder_totaljifen.setText(allPrice + "");	}	private void initListener() {		iv_back.setOnClickListener(this);		tv_address.setOnClickListener(this);		rl_address2.setOnClickListener(this);		tv_sure.setOnClickListener(this);		lv_sureorder.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,					long arg3) {				CartListBean bean = (CartListBean) cartAdapter						.getItem((int) arg3);				Bundle bundle = new Bundle();				bundle.putInt("prd_id", bean.getGoods_id());				openPage("jifen_goods_detail", bundle, true);			}		});	}	@Override	public void onClick(View v) {		if (v == iv_back) {			popBack(null);			return;		}		if (v == tv_address) {			openPage("select_address", null, false);			return;		}		if (v == rl_address2) {			openPage("select_address", null, false);			return;		}		if (v == tv_sure) {			if (allPrice > AppConstants.member.getScore()) {				UIUtil.showToast(getActivity(),						"您当前积分为" + AppConstants.member.getScore()								+ "，少于当前商品积分哦~~");				return;			}			showComfirmDilog();			return;		}	}	@Override	public void onHiddenChanged(boolean hidden) {		super.onHiddenChanged(hidden);		if (!hidden && returnBean == null) {			requestAddressData();		}	}	private void initDefaultAddress(AddressBean bean) {		if (bean == null) {			rl_address1.setVisibility(View.VISIBLE);			rl_address2.setVisibility(View.GONE);			address_id = "";			return;		}		address_id = bean.getAddress_id() + "";		rl_address1.setVisibility(View.GONE);		rl_address2.setVisibility(View.VISIBLE);		if (bean.getReceiver_mobile() != null) {			tv_phone.setText(bean.getReceiver_mobile());		}		if (bean.getReceiver_name() != null) {			tv_name.setText("联系人: " + bean.getReceiver_name());		}		tv_address_detail.setText(bean.getProvince_name() + bean.getCity_name()				+ bean.getCounty_name() + bean.getAddress());	}	private void requestAddressData() {		String url = "/api/v1/member/address_list";		HashMap<String, String> postMap = new HashMap<String, String>();		RequestDataUtil.getRequestInstance().requestData(alddressListener,				postMap, url, getActivity(), null, "true");	}	protected void parseAddressData(String response) {		try {			JSONObject jsonObject = new JSONObject(response);			String statusCode = jsonObject.getString("statusCode");			String statusMsg = jsonObject.getString("statusMsg");			if (statusCode.equals("200")) {				if (jsonObject.has("data")) {					mList = new ArrayList<AddressBean>();					JSONArray jsonArray_data = jsonObject.getJSONArray("data");					AddressBean bean = null;					for (int i = 0; i < jsonArray_data.length(); i++) {						bean = new AddressBean();						JSONObject json_address = (JSONObject) jsonArray_data								.get(i);						if (json_address.has("address_id")) {							bean.setAddress_id(json_address									.getInt("address_id"));						}						if (json_address.has("province_name")) {							bean.setProvince_name(json_address									.getString("province_name"));						}						if (json_address.has("city_name")) {							bean.setCity_name(json_address									.getString("city_name"));						}						if (json_address.has("county_name")) {							bean.setCounty_name(json_address									.getString("county_name"));						}						if (json_address.has("address")) {							bean.setAddress(json_address.getString("address"));						}						if (json_address.has("receiver_name")) {							bean.setReceiver_name(json_address									.getString("receiver_name"));						}						if (json_address.has("receiver_mobile")) {							bean.setReceiver_mobile(json_address									.getString("receiver_mobile"));						}						if (json_address.has("default_tag")) {							bean.setDefault_tag(json_address									.getString("default_tag"));						}						if (mList == null) {							mList = new ArrayList<AddressBean>();						}						mList.add(bean);					}					// 刷新地址数据					if (mList != null && mList.size() > 0) {						initDefaultAddress(mList.get(0));					} else {						initDefaultAddress(null);					}				}			} else {				UIUtil.showToast(getActivity(), statusCode + statusMsg);			}		} catch (JSONException e) {			e.printStackTrace();		}	}	// 创建订单	private void requestCreateOrder() {		HashMap<String, String> postMap = new HashMap<String, String>();		CartListBean cartbean = cartList.get(0);		List<OrderPrdAttrsBean> listAttr = cartbean.getGoods_attrs();		StringBuilder sb = new StringBuilder();		if (listAttr != null && listAttr.size() > 0) {			for (int i = 0; i < listAttr.size(); i++) {				OrderPrdAttrsBean attrBean = listAttr.get(i);				sb.append(",");				sb.append(attrBean.getAttr_id());			}			postMap.put("goods_attr_ids", sb.toString().substring(1));		}		postMap.put("goods_id", cartbean.getGoods_id() + "");		if (address_id != null && !TextUtils.isEmpty(address_id)) {			postMap.put("address_id", address_id);		} else {			UIUtil.showToast(getActivity(), "请选择配送地址");			return;		}		extraMsg = et_extramsg.getText().toString();		if (extraMsg != null && !TextUtils.isEmpty(extraMsg)) {			postMap.put("buyer_message", extraMsg);		}		int goods_cnt = cartbean.getCnt();		postMap.put("goods_cnt", goods_cnt + "");		RequestDataUtil.getRequestInstance().requestData(orderSaveListener,				postMap, AppConstants.jifen_order_save, getActivity(), null,				"true");	}	private void parserOrderSave(String json) {		try {			JSONObject jsbJson = new JSONObject(json);			String statusCode = jsbJson.getString("statusCode");			String statusMsg = jsbJson.getString("statusMsg");			if (statusCode.equals("200")) {				JSONObject dataJson = jsbJson.getJSONObject("data");				if (dataJson.has("order_id")) {					order_num = dataJson.getInt("order_id") + "";				}				if (order_num != null && !TextUtils.isEmpty(order_num)) {					// 跳到订单详情					Bundle bundle = new Bundle();					bundle.putString("order_id", order_num);					openPage("jifen_orderdetail", bundle, false);				} else {					UIUtil.showToast(getActivity(), "创建订单失败");				}			} else {				if (statusCode.equals("1001")) {					MemberDao memberDao = new MemberDao();					memberDao.deleteAll();					AppConstants.member.setSessionId("");				} else {					UIUtil.showToast(getActivity(), statusMsg);				}			}		} catch (JSONException e) {			e.printStackTrace();		}	}	private Dialog confirm_dialog;	@SuppressWarnings("deprecation")	private void showComfirmDilog() {		confirm_dialog = new Dialog(getActivity(), R.style.dialog_style);		View inflate = View.inflate(getActivity(), R.layout.cancled_layout,				null);		TextView tv_msg = ((TextView) (inflate.findViewById(R.id.tv_content)));		tv_msg.setText("扣除" + allPrice + "积分，您确认要兑换吗？");		inflate.findViewById(R.id.tv_cancled).setOnClickListener(				new OnClickListener() {					@Override					public void onClick(View arg0) {						confirm_dialog.dismiss();					}				});		inflate.findViewById(R.id.tv_confirm).setOnClickListener(				new OnClickListener() {					@Override					public void onClick(View arg0) {						confirm_dialog.dismiss();						requestCreateOrder();					}				});		confirm_dialog.setContentView(inflate);		Window window = confirm_dialog.getWindow();		window.setBackgroundDrawable(new BitmapDrawable());		window.setGravity(Gravity.CENTER);		LayoutParams params = window.getAttributes();		params.height = android.view.ViewGroup.LayoutParams.WRAP_CONTENT;		params.width = android.view.ViewGroup.LayoutParams.WRAP_CONTENT;		confirm_dialog.show();	}}