package com.dingapp.biz.page.thirdpage;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.json.JSONException;import org.json.JSONObject;import view.refresh.PullToRefreshBase;import view.refresh.PullToRefreshBase.Mode;import view.refresh.PullToRefreshListView;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ImageView;import android.widget.TextView;import com.android.volley.Response.Listener;import com.dingapp.andriod.z20.R;import com.dingapp.biz.AppConstants;import com.dingapp.biz.db.orm.ShopListBean;import com.dingapp.biz.net.RequestDataUtil;import com.dingapp.biz.page.adapters.ChooseShopsAdapter;import com.dingapp.biz.page.fourpage.MemberMyFavFragmet.MODE;import com.dingapp.biz.util.LogoutUtils;import com.dingapp.biz.util.StopRefresh;import com.dingapp.core.app.BaseFragment;import com.dingapp.core.util.UIUtil;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;public class ChooseShopsFragment extends BaseFragment implements		OnClickListener {	private ImageView iv_back;	private TextView tv_chooseshopers_sure;	private PullToRefreshListView pullListView;	private ChooseShopsAdapter adapter;	private int index = 0;	private List<ShopListBean> dataList = new ArrayList<ShopListBean>();	private String address_id = "-1";	private String lng = "-1";	private String lat = "-1";	private Listener<String> refreshListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parserShopersData(response, MODE.DOWN);		}	};	private Listener<String> moreListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parserShopersData(response, MODE.UP);		}	};	@Override	@Nullable	public View onCreateView(LayoutInflater inflater,			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {		return inflater.inflate(R.layout.choose_toshops, null);	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		if (getArguments() != null) {			if (getArguments().containsKey("address_id")) {				address_id = getArguments().getString("address_id");			}			if (getArguments().containsKey("lng")) {				lng = getArguments().getString("lng");			}			if (getArguments().containsKey("lat")) {				lat = getArguments().getString("lat");			}		}		initView();		adapter = new ChooseShopsAdapter(getActivity(), this);		pullListView.setAdapter(adapter);		requestShopperList(refreshListener, 0);	}	@SuppressWarnings({ "rawtypes", "unchecked" })	private void initView() {		iv_back = (ImageView) getView().findViewById(R.id.iv_toshops_back);		tv_chooseshopers_sure = (TextView) getView().findViewById(				R.id.tv_chooseshopers_sure);		pullListView = (PullToRefreshListView) getView().findViewById(				R.id.lv_shops_list);		StopRefresh.initRefreshView(pullListView, Mode.BOTH);		iv_back.setOnClickListener(this);		tv_chooseshopers_sure.setOnClickListener(this);		pullListView				.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2() {					@Override					public void onPullDownToRefresh(							PullToRefreshBase refreshView) {						StopRefresh.stopRefreash(pullListView);						requestShopperList(refreshListener, 0);					}					@Override					public void onPullUpToRefresh(PullToRefreshBase refreshView) {						StopRefresh.stopRefreash(pullListView);						requestShopperList(moreListener, index + 1);					}				});		pullListView.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> parent, View view,					int position, long id) {				adapter.setSelectedPosition(position - 1);				adapter.notifyDataSetChanged();			}		});	}	@Override	public void onClick(View v) {		if (v == iv_back) {			popBack(null);			return;		}		if (v == tv_chooseshopers_sure) {			Bundle bundle = new Bundle();			int position = adapter.getSelectedPosition();			ShopListBean bean = dataList.get(position);			bundle.putString("shop_name", bean.getMerchant_nick());			bundle.putInt("shop_id", bean.getMerchant_id());			popBack(bundle);			return;		}	}	// 请求匹配的商家列表	private void requestShopperList(Listener<String> listener, int index) {		HashMap<String, String> postMap = new HashMap<String, String>();		postMap.put("address_id", address_id);		postMap.put("match_mode", "store_service");		postMap.put("longitude", lng);		postMap.put("latitude", lat);		postMap.put("page_idx", index + "");		// 1有地理编码，0无地理编码		postMap.put("type", "1");		RequestDataUtil.getRequestInstance().requestData(listener, postMap,				AppConstants.merchant_match, getActivity(), null, "true");	}	// 解析商家列表	private void parserShopersData(String json, MODE mode) {		try {			JSONObject jsbJson = new JSONObject(json);			String statusCode = jsbJson.getString("statusCode");			String statusMsg = jsbJson.getString("statusMsg");			Gson gson = new Gson();			if (statusCode.equals("200")) {				String dataJson = jsbJson.getString("data");				List<ShopListBean> shopList = gson.fromJson(dataJson,						new TypeToken<List<ShopListBean>>() {						}.getType());				if (mode == MODE.DOWN) {					index = 0;					dataList.clear();				} else if (mode == MODE.UP) {					if (shopList != null && shopList.size() > 0) {						index++;					} else {						UIUtil.showToast(getActivity(), "暂无更多数据");					}				}				if (shopList != null) {					dataList.addAll(shopList);				}				adapter.setData(dataList);			} else {				if (statusCode.equals("1001")) {					UIUtil.showToast(getActivity(), "身份登录信息失效");					LogoutUtils.logout(getActivity());				} else {					UIUtil.showToast(getActivity(), statusMsg);				}			}		} catch (JSONException e) {			e.printStackTrace();		}	}}