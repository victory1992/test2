package com.dingapp.biz.hx;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import android.content.Context;import android.text.TextUtils;import android.util.Log;import com.android.volley.RequestQueue;import com.android.volley.Response.ErrorListener;import com.android.volley.Response.Listener;import com.android.volley.VolleyError;import com.dingapp.biz.AppConstants;import com.dingapp.biz.db.orm.FriendExamineBean;import com.dingapp.biz.db.orm.FriendExamineBean.DateEntity;import com.dingapp.biz.db.orm.StanderBean;import com.dingapp.biz.net.SingleRequestQueue;import com.dingapp.biz.net.StringPostRequest;import com.google.gson.Gson;import com.hyphenate.chat.EMClient;import com.hyphenate.chat.EMConversation;import com.hyphenate.easeui.dbcontacts.dbcontact.ContactDao;import com.hyphenate.easeui.domain.EaseUser;import com.hyphenate.easeui.utils.EaseUserUtils;public class HXContactUtils {	private static HXContactUtils mSinleUtils;	private RequestQueue queue;	private int idx;	private Context context;	private List<String> allUser;	private HXContactUtils(Context context) {		queue = SingleRequestQueue.getreRequestQueue(context);		idx = 0;		this.context = context;	}	public static HXContactUtils getInstance(Context context) {		if (mSinleUtils == null) {			synchronized (HXContactUtils.class) {				if (mSinleUtils == null) {					mSinleUtils = new HXContactUtils(context);				}			}		}		return mSinleUtils;	}	private Listener<String> sessionIdListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseSessionData(response);		}	};	private Listener<String> contactListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseContact(response);		}	};	protected void parseContact(String response) {		Gson gson = new Gson();		FriendExamineBean friendExamineBean = gson.fromJson(response,				FriendExamineBean.class);		if (friendExamineBean.getStatusCode().equals("200")) {			if (friendExamineBean != null					&& friendExamineBean.getData().size() > 0) {				EaseUser user = null;				allUser = new ArrayList<String>();				for (int i = 0; i < friendExamineBean.getData().size(); i++) {					DateEntity dateEntity = friendExamineBean.getData().get(i);					user = new EaseUser("appmember" + dateEntity.getMember_id());					if (dateEntity.getMember_pic().getOrigin_url() != null) {						user.setAvatar(dateEntity.getMember_pic()								.getOrigin_url());					}					// 昵称					if (dateEntity.getMember_nick_name() != null) {						user.setNickName(dateEntity.getMember_nick_name());					} else {						user.setNickName("huluhongbao"								+ dateEntity.getMember_id());					}					// 备注					if (dateEntity.getMember_mark_name() != null) {						user.setNickName(dateEntity.getMember_mark_name());					}					user.setIs_corp("false");					user.setApply_id(dateEntity.getApply_id());					// 添加联系人					if (new ContactDao(context).update(user) == 0) {						boolean add = new ContactDao(context).add(user);						Log.d("add_friend", "" + add);					}					// com.hyphenate.easeui.utils.HXContact.putEaseUser(					// "huluhongbao" + dateEntity.getMember_id(), user);					allUser.add("huluhongbao" + dateEntity.getMember_id());				}			}			Map<String, EaseUser> queryAll = new ContactDao(context)					.queryAll("false");			Iterator<String> iterator = queryAll.keySet().iterator();			while (iterator.hasNext()) {				String string = (String) iterator.next();				if (!allUser.contains(string)) {					boolean deleteConversation = EMClient.getInstance()							.chatManager().deleteConversation(string, true);					Log.d("delete", "deleteConvertion" + deleteConversation);					int del = new ContactDao(context).del(string);					Log.d("delete", string + "deleteContact" + del);				}			}			Map<String, EaseUser> map = new ContactDao(context).queryAll(null);			EaseUserUtils.contactMap = map;			// EaseUI.getInstance().setUserProfileProvider(			// new EaseUserProfileProvider() {			//			// @Override			// public EaseUser getUser(String username) {			//			// return new ContactDao(context).query(username);			// }			// });		}	}	private ErrorListener errorListener = new ErrorListener() {		@Override		public void onErrorResponse(VolleyError error) {			// TODO Auto-generated method stub		}	};	private Listener<String> helpListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseHelpData(response);		}	};	private Listener<String> hxinfoListener = new Listener<String>() {		@Override		public void onResponse(String response) {			parseHxinfosData(response);		}	};	protected void parseSessionData(String response) {		Gson gson = new Gson();		StanderBean standerBean = gson.fromJson(response, StanderBean.class);		if (standerBean.getStatusCode().equals("200")) {			requestContactData();		}	}	protected void parseHelpData(String response) {		try {			JSONObject jsonObject = new JSONObject(response);			String statusCode = jsonObject.getString("statusCode");			String statusMsg = jsonObject.getString("statusMsg");			if ("200".equals(statusCode)) {				if (jsonObject.has("data")) {					JSONArray jsonArray = jsonObject.getJSONArray("data");					EaseUser user = null;					for (int i = 0; i < jsonArray.length(); i++) {						JSONObject object_data = (JSONObject) jsonArray.get(i);						String im_id = null;						String nick_name = null;						String avastar = null;						if (object_data.has("im_id")) {							im_id = object_data.getString("im_id");						}						if (object_data.has("nick_name")) {							nick_name = object_data.getString("nick_name");						}						if (object_data.has("header_pic")) {							JSONObject pic = object_data									.getJSONObject("header_pic");							if (pic != null && pic.has("origin_url")) {								avastar = pic.getString("origin_url");							}						}						user = new EaseUser(im_id);						if (nick_name != null) {							user.setNickName(nick_name);						}						if (avastar != null) {							user.setAvatar(avastar);						}						user.setIs_corp("true");						if (new ContactDao(context).update(user) == 0) {							new ContactDao(context).add(user);						}						EaseUserUtils.helpMap.put(im_id, user);					}				}			}		} catch (JSONException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	public void rquestHXFriend() {		requestIsCorp();		querySessionID();	}	private void querySessionID() {		if (AppConstants.member == null				&& TextUtils.isEmpty(AppConstants.member.getSessionId())) {			return;		}		Map<String, String> postMap = new HashMap<String, String>();		postMap.put("app_session_id", AppConstants.member.getSessionId());		postMap.put("platform", AppConstants.PLATFORM);		String url = AppConstants.BaseUrl + "/api/v1/app/valid_session";		StringPostRequest request = new StringPostRequest(postMap, url,				sessionIdListener, errorListener);		queue.add(request);	}	private void requestContactData() {		// 哈哈哈哈哈		EaseUser easeUser = new EaseUser("appmember"				+ AppConstants.member.getMemberId());		easeUser.setAvatar(AppConstants.member.getHeaderProfile());		easeUser.setNickName(AppConstants.member.getNickName());		easeUser.setIs_corp("true");		if (new ContactDao(context).update(easeUser) == 0) {			new ContactDao(context).add(easeUser);		}		Map<String, String> postMap = new HashMap<String, String>();		postMap.put("session_id", AppConstants.member.getSessionId());		postMap.put("platform", AppConstants.PLATFORM);		postMap.put("examine_status", "pass");		String url = AppConstants.BaseUrl				+ "/api/v1/member/friend_examine_list";		StringPostRequest request = new StringPostRequest(postMap, url,				contactListener, errorListener);		queue.add(request);	}	private void requestIsCorp() {		Map<String, String> postMap = new HashMap<String, String>();		postMap.put("session_id", AppConstants.member.getSessionId());		postMap.put("platform", AppConstants.PLATFORM);		String url = AppConstants.BaseUrl + "/api/v1/member/helper";		StringPostRequest request = new StringPostRequest(postMap, url,				helpListener, errorListener);		queue.add(request);	}	// 拉取环信会员信息,获取聊天记录，根据聊天记录的memberid去拉取	public void requestHxInfos(int member_id) {		// 没有登录就不拉取了		if (AppConstants.member == null				|| AppConstants.member.getSessionId() == null				|| TextUtils.isEmpty(AppConstants.member.getSessionId())) {			return;		}		EaseUser user = new EaseUser("appmember"				+ AppConstants.member.getMemberId());		if (!TextUtils.isEmpty(AppConstants.member.getNickName())) {			user.setNickName(AppConstants.member.getNickName());		}		if (!TextUtils.isEmpty(AppConstants.member.getHeaderProfile())) {			user.setAvatar(AppConstants.member.getHeaderProfile());		}		EaseUserUtils.helpMap.put(				"appmember" + AppConstants.member.getMemberId(), user);		user.setIs_corp("true");		if (new ContactDao(context).update(user) == 0) {			new ContactDao(context).add(user);		}		Map<String, EMConversation> conversations = EMClient.getInstance()				.chatManager().getAllConversations();		StringBuilder sb = new StringBuilder();		if (member_id != 0) {			sb.append(",");			sb.append(member_id);		}		for (String key : conversations.keySet()) {			sb.append(",");			if (key.contains("merchant")) {				sb.append(key.replace("merchant", ""));			} else {				sb.append("0");			}		}		if (sb.toString().length() == 0) {			return;		}		String memberids = sb.toString().substring(1);		Map<String, String> postMap = new HashMap<String, String>();		postMap.put("session_id", AppConstants.member.getSessionId());		postMap.put("platform", AppConstants.PLATFORM);		postMap.put("memberIds", memberids);		String url = AppConstants.BaseUrl + AppConstants.hx_infos;		StringPostRequest request = new StringPostRequest(postMap, url,				hxinfoListener, errorListener);		queue.add(request);	}	protected void parseHxinfosData(String response) {		try {			JSONObject jsonObject = new JSONObject(response);			String statusCode = jsonObject.getString("statusCode");			if ("200".equals(statusCode)) {				if (jsonObject.has("data")) {					JSONArray jsonArray = jsonObject.getJSONArray("data");					EaseUser user = null;					for (int i = 0; i < jsonArray.length(); i++) {						JSONObject object_data = (JSONObject) jsonArray.get(i);						String im_id = null;						String nick_name = null;						String avastar = null;						if (object_data.has("memberId")) {							im_id = "merchant" + object_data.getInt("memberId");						}						if (object_data.has("nickName")) {							nick_name = object_data.getString("nickName");						}						if (object_data.has("headerUrl")) {							avastar = object_data.getString("headerUrl");						}						user = new EaseUser(im_id);						if (nick_name != null) {							user.setNickName(nick_name);						}						if (avastar != null) {							user.setAvatar(avastar);						}						EaseUserUtils.helpMap.put(im_id, user);						user.setIs_corp("true");						if (new ContactDao(context).update(user) == 0) {							new ContactDao(context).add(user);						}					}				}			}		} catch (JSONException e) {			e.printStackTrace();		}	}}